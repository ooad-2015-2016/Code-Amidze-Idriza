-Solid principi. Analiza dijagrama klasa.-


1.	Princip pojedinacne odgovornosti :

 ->	Klasa bi trebala imati samo jedan razlog za promjenu

U svakoj klasi se nalaze samo oni atributi i metode koji su striktno vezani za nju. Npr: Klasa osoba je napravljena tako da sluzi za dobavljanje svih licnih informacija koje su potrebne za ucesnike u sistemu, dok su klase AutoSkola, Kandidat, Instruktor i Komisija odvojene jer sluze za razlicite namjene. Iz navedenog slijedi da je ovaj princip ispostovan.

------------------------------------------------------------------------
2.	Otvoreno zatvoren princip : 

 ->	Entiteti softvera (klase, moduli, funkcije) trebali bi biti otvoreni za  nadogradnju,  ali zatvoreni za modifikacije

Ovaj princip je posebno primjenjen razdvajanjem klasa TestTeorija i TestPrvaPomoc. Razdvojene su jer sluze za dvije razlicite stvari, moguce ih je mijenjati, i posebno specificirati, tj nadogradjivati, ali nije moguce izmijeniti samu namjenu klase Test. 

------------------------------------------------------------------------
3.	Liskov princip zamjene : 

 ->	Podtipovi moraju biti zamjenjivi njihovim osnovnim tipovima
 
Sve klase koje su naslijedjene u nasem dijagramu postuju ovaj princip, klase naslijedjene iz Osobe, ali i klase naslijedjene iz Testa. Navedeno se moze vidjeti iz dijagrama klasa.

------------------------------------------------------------------------

4.	Princip inverzije ovisnosti :  

->	A.  Moduli visokog nivoa ne bi trebali o visiti od modula niskog nivoa. oba bi trebalo da ovise od apstrakcija. 
->	B. Moduli ne bi trebali ovisiti od detalja. detalji bi trebali biti ovisni od apstrakcija.
Osoba, Test su napravljene kao apstraktne, jer se ove klase se rijetko mijenjaju cime je zadovoljeno da klase visokog nivoa ne ovise o klasama nizeg nivoa, kao i ovisnost detalja od apstrakcija. 
